{"version":3,"file":"static/js/785.6e4da938.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/DialogsItems/DialogsItems.module.css?86ae","components/Dialogs/DialogsItems/DialogsItems.tsx","webpack://samurai-way/./src/components/Dialogs/DialogsMessages/DialogsMessages.module.css?ff22","components/Dialogs/DialogsMessages/DialogsMessages.tsx","components/Dialogs/MessageForm.tsx","hoc/withAuthRedirect.tsx","bll/selectors/dialogsSelectors.ts","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","components/common/FormsControls/ButtonSubmit/ButtonSubmit.tsx","components/common/FormsControls/TextareaTC/TextareaFC.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsItems\":\"DialogsItems_dialogsItems__WTpXo\",\"avatar\":\"DialogsItems_avatar__Cm8M1\",\"active\":\"DialogsItems_active__9c483\"};","import s from \"./DialogsItems.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport React from \"react\";\n\ntype DialogsItemsProps = {\n    id: string\n    name: string\n    avatar: string\n    key: string\n}\n\nexport const DialogsItems = (props: DialogsItemsProps) => {\n    return (\n        <div className={s.dialogsItems}>\n            <NavLink to={'/dialogs/' + props.id}>\n                {props.name}\n                <img className={s.avatar} src={props.avatar} alt={'avatar'}/>\n            </NavLink>\n\n        </div>\n    )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"messageContainer\":\"DialogsMessages_messageContainer__gtXtI\",\"message\":\"DialogsMessages_message__x87dQ\",\"messageBox\":\"DialogsMessages_messageBox__C+J8y\",\"avatar\":\"DialogsMessages_avatar__38Qiz\"};","import s from \"./DialogsMessages.module.css\";\n\nimport React from \"react\";\n\n\ntype DialogsMessagesProps = {\n    message: string\n    avatar?: string\n    key: string\n}\nexport const DialogsMessages = (props: DialogsMessagesProps) => {\n    return (\n            <div className={s.messageContainer}>\n                <img className={s.avatar} src={props.avatar} alt={'avatar'}/>\n                <div className={s.messageBox}>\n                    <span className={s.message}>{props.message}</span>\n                </div>\n            </div>\n    )\n}","import React, {FC} from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport s from \"./Dialogs.module.css\";\nimport {TextareaFC} from \"../common/FormsControls/TextareaTC/TextareaFC\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\nimport {ButtonSubmit} from \"../common/FormsControls/ButtonSubmit/ButtonSubmit\";\n\nexport type MessageFormDataType = {\n    message: string\n}\nconst maxLength = maxLengthCreator(250)\nconst MessageForm: FC<InjectedFormProps<MessageFormDataType>> = (props) => {\n    const {handleSubmit} = props\n    return (\n        <form onSubmit={handleSubmit} className={s.form}>\n            <div className={s.data}>\n                <Field placeholder='Enter you message'\n                       type='text'\n                       name='message'\n                       validate={[required, maxLength]}\n                       component={TextareaFC}\n                />\n            </div>\n            <ButtonSubmit form={MessageForm}/>\n        </form>\n    )\n}\nexport const MessageReduxForm = reduxForm<MessageFormDataType>({\n    // a unique name for the form\n    form: 'dialogAddMessageForm'\n})(MessageForm)","import {Redirect} from \"react-router-dom\";\nimport React, {ComponentType} from \"react\";\nimport {connect} from \"react-redux\";\nimport {stateType} from \"../bll/redux-store\";\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\nconst mapStateToProps = (state: stateType): MapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>)  {\n    const RedirectComponent = (props: MapStateToPropsType) => {\n        const {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to='/login'/>\n\n        return <Component {...restProps as T}/>\n    }\n\n    return connect(mapStateToProps)(RedirectComponent)\n}","import {stateType} from \"../redux-store\";\n\nexport const getDialogsData = (state: stateType) => {\n    return state.dialogsPage.dialogsData\n}\nexport const getMessagesData = (state: stateType) => {\n    return state.dialogsPage.messagesData\n}","import {Dialogs, DialogsDataType, MessagesDataType} from \"./Dialogs\";\nimport {AppDispatchType, stateType} from \"../../bll/redux-store\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport React from \"react\";\nimport {getDialogsData, getMessagesData} from \"../../bll/selectors/dialogsSelectors\";\nimport {addMessageAC} from \"../../bll/reducers/dialogsReducer\";\n\ntype MapStateToPropsType = {\n    dialogsData: DialogsDataType[]\n    messagesData: MessagesDataType[]\n}\ntype MapDispatchToPropsType = {\n    sendMessage: (message: string) => void\n}\n\nlet mapStateToProps = (state: stateType): MapStateToPropsType => {\n    return {\n        dialogsData: getDialogsData(state),\n        messagesData: getMessagesData(state),\n    }\n}\nlet mapDispatchToProps = (dispatch: AppDispatchType): MapDispatchToPropsType => {\n    return {\n        sendMessage: (message: string) => dispatch(addMessageAC(message))\n    }\n}\nexport default compose<React.ComponentType>(\n    withAuthRedirect,\n    connect(mapStateToProps, mapDispatchToProps))(Dialogs)","import React, {FC} from 'react';\nimport s from \"./Dialogs.module.css\"\nimport {DialogsItems} from \"./DialogsItems/DialogsItems\";\nimport {DialogsMessages} from \"./DialogsMessages/DialogsMessages\";\nimport {MessageFormDataType, MessageReduxForm} from \"./MessageForm\";\n\nexport type DialogsProps = {\n    dialogsData: DialogsDataType[]\n    messagesData: MessagesDataType[]\n    sendMessage: (message: string) => void\n}\nexport type DialogsDataType = {\n    id: string\n    name: string\n    avatar: string\n}\nexport type MessagesDataType = {\n    id: string\n    message: string\n    avatar?: string\n}\n\nexport const Dialogs: FC<DialogsProps> = ({\n                                              dialogsData,\n                                              messagesData,\n                                              sendMessage\n                                          }) => {\n\n    const sendMessageHandler = (values: MessageFormDataType) => {\n        sendMessage(values.message)\n    }\n    return (\n        <div className=\"content\">\n            <div className={s.dialogsContainer}>\n                <div className={s.sidebar}>\n\n                </div>\n                <div className={s.dialogs}>\n                    <div className={s.dialogsItems}>\n                        {dialogsData.map(elem => {\n                            return (\n                                <DialogsItems id={elem.id} name={elem.name} avatar={elem.avatar} key={elem.id}/>\n                            )\n                        })}\n\n                    </div>\n                    <div className={s.dialogsMessages}>\n                        {messagesData.map(elem => {\n                            return (\n                                <DialogsMessages\n                                    message={elem.message}\n                                    avatar={elem.avatar}\n                                    key={elem.id}\n                                />\n                            )\n                        })}\n                    </div>\n                    <div className={s.addDialogContainer}>\n                        <MessageReduxForm onSubmit={sendMessageHandler}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n\n\n","import React, {FC} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { submit } from \"redux-form\";\nimport { Button } from \"@material-ui/core\";\n\ntype ButtonSubmitProps = {\n    form: any\n}\nexport const ButtonSubmit: FC<ButtonSubmitProps> = ({form}) => {\n    const dispatch = useDispatch();\n\n    const onClickSubmit = () => {\n        dispatch(submit(form));\n    };\n\n    return (\n        <Button\n            type=\"submit\"\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={onClickSubmit}\n        >\n            Send\n        </Button>\n    );\n};","import React, {FC} from \"react\";\nimport {TextField, TextFieldProps} from \"@material-ui/core\";\nimport {WrappedFieldProps} from \"redux-form\";\n\nexport const TextareaFC: FC<WrappedFieldProps & TextFieldProps> = ({\n                                                                       input,\n                                                                       placeholder,\n                                                                       variant,\n                                                                       type,\n                                                                       meta: {touched, error},\n                                                                       ...custom\n                                                                   }) => {\n    return (\n        <TextField {...input}\n                   style={{marginBottom: '10px'}}\n                   error={touched && error}\n                   helperText={touched && error}\n                   fullWidth\n                   label={placeholder}\n                   type={type}\n                   variant={variant ? variant : 'outlined'}\n                   size='small'/>\n    )\n}","export const required = (value: string) => {\n    return value ? undefined : 'Field is required'\n}\n\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n    return (value && value.length > maxLength) ? `Max length is ${maxLength} symbols` : undefined\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogsContainer\":\"Dialogs_dialogsContainer__8cx4-\",\"dialogs\":\"Dialogs_dialogs__oe96H\",\"sidebar\":\"Dialogs_sidebar__4F+Oi\",\"dialogsMessages\":\"Dialogs_dialogsMessages__F6PfG\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"addDialogContainer\":\"Dialogs_addDialogContainer__1AuXx\",\"messageInput\":\"Dialogs_messageInput__RpvMK\"};"],"names":["DialogsItems","props","className","s","to","id","name","src","avatar","alt","DialogsMessages","message","maxLength","maxLengthCreator","MessageReduxForm","reduxForm","form","MessageForm","handleSubmit","onSubmit","Field","placeholder","type","validate","required","component","TextareaFC","ButtonSubmit","mapStateToProps","state","isAuth","auth","getDialogsData","dialogsPage","dialogsData","getMessagesData","messagesData","compose","Component","connect","restProps","dispatch","sendMessage","addMessageAC","map","elem","values","useDispatch","color","variant","onClick","submit","input","meta","touched","error","style","marginBottom","helperText","fullWidth","label","size","value","undefined","length"],"sourceRoot":""}
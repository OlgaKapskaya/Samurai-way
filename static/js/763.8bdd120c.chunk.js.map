{"version":3,"file":"static/js/763.8bdd120c.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Content/Content.module.css?e72a","webpack://samurai-way/./src/components/Content/MyPosts/AddPost/AddPost.module.css?d9b4","components/Content/MyPosts/AddPost/AddPostForm.tsx","components/Content/MyPosts/AddPost/AddPostContainer.tsx","components/Content/MyPosts/AddPost/AddPost.tsx","webpack://samurai-way/./src/components/Content/MyPosts/MyPosts.module.css?f55d","webpack://samurai-way/./src/components/Content/MyPosts/Posts/PostCompponent.module.css?e8d6","../node_modules/@material-ui/icons/esm/FavoriteBorder.js","components/Content/MyPosts/Posts/PostComponent.tsx","components/Content/MyPosts/MyPosts.tsx","components/Content/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Content/Profile/Profile.module.css?6da8","components/Content/Profile/Status/ProfileStatusWithHooks.tsx","webpack://samurai-way/./src/components/Content/Profile/ProfileData/Contact/Contact.module.css?4219","components/Content/Profile/ProfileData/Contact/Contact.tsx","components/Content/Profile/ProfileData/ProfileData.tsx","webpack://samurai-way/./src/components/Content/Profile/ProfileDataForm/ProfileDataForm.module.css?0f94","components/Content/Profile/ProfileDataForm/ProfileDataForm.tsx","components/Content/Profile/Profile.tsx","components/Content/Content.tsx","bll/selectors/profileSelectors.ts","components/Content/ContentContainer.tsx","components/common/FormsControls/ButtonSubmit/ButtonSubmit.tsx","components/common/FormsControls/CheckboxTC/CheckboxTC.tsx","components/common/FormsControls/TextareaTC/TextareaFC.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"containerInfoAndPosts\":\"Content_containerInfoAndPosts__K-4vc\",\"containerInfo\":\"Content_containerInfo__K-Awl\",\"containerPosts\":\"Content_containerPosts__hRFaP\",\"headerContent\":\"Content_headerContent__5zGjm\",\"sidebar\":\"Content_sidebar__HerI4\"};","// extracted by mini-css-extract-plugin\nexport default {\"postContainer\":\"AddPost_postContainer__j6mqH\",\"title\":\"AddPost_title__48lN8\",\"newPost\":\"AddPost_newPost__+wdRj\",\"buttonContainer\":\"AddPost_buttonContainer__wFnWE\"};","import React, {FC} from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport s from \"../../../Dialogs/Dialogs.module.css\";\nimport {maxLengthCreator} from \"../../../../utils/validators/validators\";\nimport {TextareaFC} from \"../../../common/FormsControls/TextareaTC/TextareaFC\";\nimport {ButtonSubmit} from \"../../../common/FormsControls/ButtonSubmit/ButtonSubmit\";\n\nexport type AddPostFormDataType = {\n    post: string\n}\nconst maxLength = maxLengthCreator(100)\nconst AddPostForm: FC<InjectedFormProps<AddPostFormDataType>> = (props) => {\n    const {handleSubmit} = props\n    return (\n        <form onSubmit={handleSubmit} className={s.form}>\n            <div className={s.data}>\n                <Field placeholder='Enter you post'\n                       type='text'\n                       name='post'\n                       component={TextareaFC}\n                       validate={[maxLength]}\n                />\n            </div>\n                <ButtonSubmit form={AddPostForm}/>\n        </form>\n    )\n}\nexport const AddPostReduxForm = reduxForm<AddPostFormDataType>({\n    form: 'profileAddPostForm'\n})(AddPostForm)","import {AddPost} from \"./AddPost\";\nimport {connect} from \"react-redux\";\nimport {AppDispatchType} from \"../../../../bll/redux-store\";\nimport {addPostAC} from \"../../../../bll/reducers/profileReducer\";\n\ntype  MapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nconst mapDispatchToProps = (dispatch: AppDispatchType): MapDispatchToPropsType => {\n    return {\n        addPost: (newPostText: string) => dispatch(addPostAC(newPostText))\n    }\n}\n\nexport const AddPostContainer = connect(null, mapDispatchToProps )(AddPost)","import React, {FC} from \"react\";\nimport c from \"./AddPost.module.css\";\nimport {AddPostFormDataType, AddPostReduxForm} from \"./AddPostForm\";\n\ntype AddPostProps = {\n    addPost: (newPostText: string) => void\n}\n\nexport const AddPost: FC<AddPostProps> = ({addPost}) => {\n    const addPostHandler = (values: AddPostFormDataType):void => {\n        addPost(values.post)\n    }\n    return (\n        <div className={c.postContainer}>\n            <h3 className={c.title}>My posts</h3>\n            <AddPostReduxForm onSubmit={addPostHandler}/>\n        </div>\n    )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"myPostsContainer\":\"MyPosts_myPostsContainer__JJOly\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"PostCompponent_post__wtL2o\",\"avatarAndName\":\"PostCompponent_avatarAndName__-paSU\",\"avatar\":\"PostCompponent_avatar__7PQk-\",\"message\":\"PostCompponent_message__OEw-+\",\"likes\":\"PostCompponent_likes__8Nc8c\",\"likeimg\":\"PostCompponent_likeimg__978Wz\"};","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z\"\n}), 'FavoriteBorder');","import React from \"react\";\nimport post from \"./PostCompponent.module.css\"\nimport {IconButton} from \"@material-ui/core\";\nimport {FavoriteBorder} from \"@material-ui/icons\";\nimport {UserAvatar} from \"../../Profile/Avatar/UserAvatar\";\n\n\ntype PostComponentProps = {\n    id: string\n    message: string\n    likes: number\n    userName: string\n    userAvatar: string\n    addLike: (count: number, id: string) => void\n}\n\n\nconst PostComponent = (props: PostComponentProps) => {\n    const onClickLikeHandler = () => {\n        let count = props.likes+1\n        props.addLike(count, props.id)\n    }\n\n    return (\n        <div className={post.post}>\n            <div className={post.avatarAndName}>\n                <UserAvatar img={props.userAvatar} size={30}/>\n                <h5 style={{marginLeft: '5px'}}>{props.userName}</h5>\n            </div>\n            <span className={post.message}> {props.message}</span>\n            <div className={post.likes}>\n                <IconButton onClick={onClickLikeHandler} size={'small'}>\n                    <FavoriteBorder color={'primary'}/>\n                </IconButton>\n                <span> {props.likes}</span>\n\n            </div>\n\n        </div>\n        )\n\n}\nexport const PostComponentContainer = React.memo(PostComponent)\n","import React, {memo} from \"react\";\nimport {AddPostContainer} from \"./AddPost/AddPostContainer\";\nimport s from './MyPosts.module.css'\nimport {PostComponentContainer} from \"./Posts/PostComponent\";\n\nexport type MyPostsProps = {\n    postData: Array<PostDataType>\n    userName: string\n    userAvatar: string\n    addLike: (count: number, id: string) => void\n}\n\nexport type PostDataType = {\n    id: string\n    message: string\n    likes: number\n}\n\n\nexport const  MyPosts = memo((props: MyPostsProps) => {\n    return (\n        <div className={s.myPostsContainer}>\n            <AddPostContainer/>\n            {props.postData.map(elem => {\n                return (\n                    <PostComponentContainer key={elem.id}\n                                            id={elem.id}\n                                            message={elem.message}\n                                            likes={elem.likes}\n                                            userName={props.userName}\n                                            userAvatar={props.userAvatar}\n                                            addLike={props.addLike}/>\n\n                )\n            })}\n        </div>\n    )\n})\n","import {StateType} from \"../../../bll/types\";\nimport {AppDispatchType} from \"../../../bll/redux-store\";\nimport {connect} from \"react-redux\";\nimport {MyPosts, PostDataType} from \"./MyPosts\";\nimport {addLike} from \"../../../bll/reducers/profileReducer\";\n\ntype mapStateToPropsType = {\n    postData: PostDataType[]\n    userName: string\n    userAvatar: string\n}\ntype mapDispatchToPropsType  = {\n    addLike: (count: number, id: string) => void\n}\n\nlet mapStateToProps = (state: StateType):mapStateToPropsType => {\n    return {\n        postData: state.profilePage.postData,\n        userName: state.profilePage.profile.fullName,\n        userAvatar: state.profilePage.profile.photos.small\n    }\n}\n\nlet mapDispatchToProps = (dispatch: AppDispatchType): mapDispatchToPropsType => {\n    return {\n        addLike: (count: number, id: string) => dispatch(addLike(count, id)),\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","// extracted by mini-css-extract-plugin\nexport default {\"mainContainer\":\"Profile_mainContainer__h6HI4\",\"avatarContainer\":\"Profile_avatarContainer__PQXug\",\"infoContainer\":\"Profile_infoContainer__6ZjPD\",\"Name\":\"Profile_Name__iHknu\",\"data\":\"Profile_data__fWdt5\",\"contacts\":\"Profile_contacts__43dk5\",\"editButton\":\"Profile_editButton__w3vjk\"};","import {TextField} from \"@material-ui/core\";\nimport React, {ChangeEvent, FC, useEffect, useState} from \"react\";\n\ntype ProfileStatusWithHooksPropsType = {\n    status: string\n    updateUserStatus: (status: string) => void\n}\nexport const ProfileStatusWithHooks: FC<ProfileStatusWithHooksPropsType> = ({status, updateUserStatus}) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [newStatus, setNewStatus] = useState<string>(status)\n\n    useEffect(() => {\n        if (status !== newStatus)\n            setNewStatus(status)\n    }, [status])\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        updateUserStatus(newStatus)\n    }\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setNewStatus(e.currentTarget.value)\n    }\n    return (\n            <div style={{\n                height: 'max-content',\n                fontWeight: 'bold',\n                width: '100%',\n                wordBreak: 'break-word'\n            }}>\n                Status:\n                {\n                    editMode\n                        ? <TextField value={newStatus}\n                                     onBlur={deactivateEditMode}\n                                     onChange={onChangeStatus}\n                                     autoFocus/>\n                        : <span style={{\n                            fontStyle: 'italic',\n                            minWidth: '100px',\n                            minHeight: '12px',\n                            cursor: 'pointer',\n                            fontWeight: 'normal',\n\n                        }}\n                                onDoubleClick={activateEditMode}>\n                        {status ? ' ' + status : ' -'}\n                        </span>\n                }\n            </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"link\":\"Contact_link__ycuhH\"};","import React, {FC} from \"react\";\nimport s from './Contact.module.css'\n\ntype ContactsPropsType = {\n    title: string\n    link?: string\n}\nexport const Contact: FC<ContactsPropsType> = ({title, link}) => {\n    return (\n        <span style={{margin: \"0 15px\", wordBreak: \"break-word\"}}>\n            {title}:\n            <a href={link} className={s.link}>{link}</a>\n        </span>\n    )\n}","import s from \"../Profile.module.css\";\nimport {Contact} from \"./Contact/Contact\";\nimport React, {FC} from \"react\";\nimport {ProfileUserType} from \"../../../../bll/types\";\n\ntype ProfileDataPropsType = {\n    profile: ProfileUserType\n}\nexport const ProfileData:FC<ProfileDataPropsType> = ({profile}) => {\n    return (\n        <div className={s.data}>\n            <span> About me: {profile.aboutMe} </span>\n            <span> Looking for a job: {profile.lookingForAJob ? \"✅\" : \"\"}</span>\n            {profile.lookingForAJob && <span> Skills: {profile.lookingForAJobDescription}</span>}\n            <span> Contacts: </span>\n            {Object.entries(profile.contacts)\n                .map(elem => <Contact key={elem[0]} title={elem[0]} link={elem[1]}/>)}\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ProfileDataForm_form__VS-xp\",\"error\":\"ProfileDataForm_error__5rPKb\"};","import React, {FC} from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {TextareaFC} from \"../../../common/FormsControls/TextareaTC/TextareaFC\";\nimport {required} from \"../../../../utils/validators/validators\";\nimport {CheckboxTC} from \"../../../common/FormsControls/CheckboxTC/CheckboxTC\";\nimport {ButtonSubmit} from \"../../../common/FormsControls/ButtonSubmit/ButtonSubmit\";\nimport s from './ProfileDataForm.module.css'\n\nexport type ProfileDataFormDataType = {\n    fullName: string\n    aboutMe: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    facebook: string\n    website: string\n    vk: string\n    twitter: string\n    instagram: string\n    youtube: string\n    github: string\n    mainLink: string\n}\nexport const ProfileDataForm: FC<InjectedFormProps<ProfileDataFormDataType>> = (props) => {\n    const {handleSubmit, error} = props\n    const model = {\n        facebook: '',\n        website: '',\n        vk: '',\n        twitter: '',\n        instagram: '',\n        youtube: '',\n        github: '',\n        mainLink: '',\n    }\n    return <form onSubmit={handleSubmit} className={s.form}>\n        {error && <div className={s.error}> { error } </div>}\n        <Field placeholder='Full name'\n               type='text'\n               name='fullName'\n               component={TextareaFC}\n               validate={[required]}\n        />\n        <Field placeholder='About'\n               type='text'\n               name='aboutMe'\n               component={TextareaFC}\n               validate={[required]}\n        />\n        <Field type='checkbox'\n               name='lookingForAJob'\n               component={CheckboxTC}\n               validate={[required]}\n               label='Looking for a job'/>\n        <Field placeholder='Skills'\n               type='text'\n               name='lookingForAJobDescription'\n               component={TextareaFC}\n        />\n        {Object.keys(model).map(key => <Field placeholder={key}\n                                              key={key}\n                                              type='text'\n                                              name={key}\n                                              component={TextareaFC}\n        />)}\n\n        <ButtonSubmit form={ProfileDataForm}/>\n    </form>\n}\nexport const ProfileForm = reduxForm<ProfileDataFormDataType>({\n    form: 'profileInfoForm'\n})(ProfileDataForm)","import React, {FC, useState} from \"react\";\nimport s from \"./Profile.module.css\";\nimport {ProfileUserType} from \"../../../bll/types\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {ProfileStatusWithHooks} from \"./Status/ProfileStatusWithHooks\";\nimport {UserAvatar} from \"./Avatar/UserAvatar\";\nimport {ProfileData} from \"./ProfileData/ProfileData\";\nimport {ProfileDataFormDataType, ProfileForm} from \"./ProfileDataForm/ProfileDataForm\";\nimport {Button} from \"@material-ui/core\";\n\ntype ProfileInfoProps = {\n    profile: ProfileUserType\n    status: string\n    updateUserStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (photo: File) => void\n    saveProfile: (data: ProfileDataFormDataType) => void\n}\nexport const Profile: FC<ProfileInfoProps> = ({\n                                                  profile,\n                                                  savePhoto,\n                                                  status,\n                                                  updateUserStatus,\n                                                  isOwner,\n                                                  saveProfile\n                                              }) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n    const onSubmit = (data: ProfileDataFormDataType) => {\n        saveProfile(data)\n        setEditMode(false)\n    }\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div className={s.mainContainer}>\n            <div className={s.avatarContainer}>\n                <UserAvatar img={profile.photos.large}\n                            savePhoto={savePhoto}\n                            size={200}\n                            isOwner={isOwner}/>\n            </div>\n            <div className={s.infoContainer}>\n                <div className={s.Name}>{profile.fullName}</div>\n                <ProfileStatusWithHooks status={status}\n                                        updateUserStatus={updateUserStatus}/>\n                {editMode\n                    ? <ProfileForm onSubmit={onSubmit} initialValues={profile}/>\n                    : <ProfileData profile={profile}/>}\n                {isOwner && !editMode\n                    && <Button onClick={() => setEditMode(true)}\n                               variant='contained'\n                               color='primary'\n                               className={s.editButton}\n                    >\n                        Edit\n                    </Button>}\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport {PostDataType} from \"./MyPosts/MyPosts\";\nimport s from './Content.module.css'\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {Profile} from \"./Profile/Profile\";\nimport {ProfileUserType} from \"../../bll/types\";\nimport {ProfileDataFormDataType} from \"./Profile/ProfileDataForm/ProfileDataForm\";\n\n\ntype ContentProps = {\n    postData: PostDataType[]\n    profile: ProfileUserType\n    status: string\n    updateUserStatus: (status: string) => void\n    savePhoto: (photo: File) => void\n    saveProfile: (data: ProfileDataFormDataType) => void\n    isOwner: boolean\n}\n\n\nfunction Content(props: ContentProps) {\n    return (\n        <div className='content'>\n            <div >\n                <img className={s.headerContent} alt='big content'\n                     src='https://img5.goodfon.ru/wallpaper/nbig/5/2e/gory-skaly-vodoem-les-otrazhenie-bereg.jpg'/>\n            </div>\n            <div className={s.containerInfoAndPosts}>\n                <div className={s.containerInfo}>\n                    <Profile profile={props.profile}\n                             status={props.status}\n                             isOwner={props.isOwner}\n                             savePhoto={props.savePhoto}\n                             saveProfile={props.saveProfile}\n                             updateUserStatus={props.updateUserStatus}/>\n                </div>\n                <div className={s.containerPosts}>\n                    <MyPostsContainer/>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Content;","import {stateType} from \"../redux-store\";\n\nexport const getPostsData = (state: stateType) => {\n    return state.profilePage.postData\n}\nexport const getProfileData = (state: stateType) => {\n    return state.profilePage.profile\n}\nexport const getProfileStatus = (state: stateType) => {\n    return state.profilePage.status\n}","import React from \"react\";\nimport Content from \"./Content\";\nimport {PostDataType} from \"./MyPosts/MyPosts\";\nimport {ProfileUserType} from \"../../bll/types\";\nimport {connect} from \"react-redux\";\nimport {\n    addLike,\n    addPostAC,\n    getUserProfileTC,\n    getUserStatusTC, savePhotoTC, saveProfileTC, setUserProfile,\n    updateUserStatusTC\n} from \"../../bll/reducers/profileReducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {stateType} from \"../../bll/redux-store\";\nimport {compose} from \"redux\";\nimport {getIsAuth, getUserID} from \"../../bll/selectors/authSelectors\";\nimport {getPostsData, getProfileData, getProfileStatus} from \"../../bll/selectors/profileSelectors\";\nimport {ProfileDataFormDataType} from \"./Profile/ProfileDataForm/ProfileDataForm\";\n\ntype mapStateToPropsType = {\n    postData: PostDataType[]\n    profile: ProfileUserType\n    status: string\n    isAuth: boolean\n    userID: number | null\n}\ntype mapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n    addLike: (count: number, id: string) => void\n    setUserProfile: (profile: ProfileUserType) => void\n    getUserProfileTC: (userID: string) => void\n    getUserStatusTC: (userID: string) => void\n    updateUserStatus: (status: string) => void\n    savePhotoTC: (photo: File) => void\n    saveProfileTC: (data: ProfileDataFormDataType) => void\n\n}\ntype PathParamsType = {\n    userID: string,\n}\n\n\n\ntype ContentPropsType = RouteComponentProps<PathParamsType> & mapStateToPropsType\n    & mapDispatchToPropsType\n\nexport class ContentContainer extends React.Component<ContentPropsType> {\n    refreshProfile = () => {\n        let userAuthorizedID = this.props.match.params.userID\n        if (!userAuthorizedID) {\n            userAuthorizedID = this.props.userID ? this.props.userID.toString() : ''\n            if (userAuthorizedID === '') {\n                this.props.history.push('/login')\n            }\n        }\n\n        this.props.getUserProfileTC(userAuthorizedID)\n        this.props.getUserStatusTC(userAuthorizedID)\n    }\n    componentDidMount() {\n        this.refreshProfile()\n    }\n    componentDidUpdate(prevProps: Readonly<ContentPropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userID !== prevProps.match.params.userID)\n        this.refreshProfile()\n    }\n\n    render() {\n        return <Content isOwner={!this.props.match.params.userID}\n                        savePhoto={this.props.savePhotoTC}\n                        saveProfile={this.props.saveProfileTC}\n                        {...this.props}/>\n    }\n}\n\nlet mapStateToProps = (state: stateType): mapStateToPropsType => {\n    return {\n        postData: getPostsData(state),\n        profile: getProfileData(state),\n        status: getProfileStatus(state),\n        isAuth: getIsAuth(state),\n        userID: getUserID(state),\n    }\n}\n\nexport default compose<React.ComponentType>(\n    // withAuthRedirect,\n    connect(mapStateToProps, {\n        addPost: addPostAC, addLike, setUserProfile,\n        getUserProfileTC, getUserStatusTC,\n        updateUserStatus: updateUserStatusTC, savePhotoTC, saveProfileTC\n    } as mapDispatchToPropsType),\n    withRouter)(ContentContainer)\n\n","import React, {FC} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { submit } from \"redux-form\";\nimport { Button } from \"@material-ui/core\";\n\ntype ButtonSubmitProps = {\n    form: any\n}\nexport const ButtonSubmit: FC<ButtonSubmitProps> = ({form}) => {\n    const dispatch = useDispatch();\n\n    const onClickSubmit = () => {\n        dispatch(submit(form));\n    };\n\n    return (\n        <Button\n            type=\"submit\"\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={onClickSubmit}\n        >\n            Send\n        </Button>\n    );\n};","import {FC} from \"react\";\nimport {WrappedFieldProps} from \"redux-form\";\nimport {Checkbox, CheckboxProps, FormControlLabel, FormControlLabelProps} from \"@material-ui/core\";\n\n\nexport const CheckboxTC: FC<WrappedFieldProps & CheckboxProps & FormControlLabelProps> = ({\n                                                                                       input,\n                                                                                       label\n                                                                                   }) => (\n    <FormControlLabel\n        control={\n            <Checkbox\n                checked={!!input.value}\n                onChange={input.onChange}\n                color='primary'\n            />\n        }\n        label={label}\n    />\n);","import React, {FC} from \"react\";\nimport {TextField, TextFieldProps} from \"@material-ui/core\";\nimport {WrappedFieldProps} from \"redux-form\";\n\nexport const TextareaFC: FC<WrappedFieldProps & TextFieldProps> = ({\n                                                                       input,\n                                                                       placeholder,\n                                                                       variant,\n                                                                       type,\n                                                                       meta: {touched, error},\n                                                                       ...custom\n                                                                   }) => {\n    return (\n        <TextField {...input}\n                   style={{marginBottom: '10px'}}\n                   error={touched && error}\n                   helperText={touched && error}\n                   fullWidth\n                   label={placeholder}\n                   type={type}\n                   variant={variant ? variant : 'outlined'}\n                   size='small'/>\n    )\n}","export const required = (value: string) => {\n    return value ? undefined : 'Field is required'\n}\n\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n    return (value && value.length > maxLength) ? `Max length is ${maxLength} symbols` : undefined\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogsContainer\":\"Dialogs_dialogsContainer__8cx4-\",\"dialogs\":\"Dialogs_dialogs__oe96H\",\"sidebar\":\"Dialogs_sidebar__4F+Oi\",\"dialogsMessages\":\"Dialogs_dialogsMessages__F6PfG\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"addDialogContainer\":\"Dialogs_addDialogContainer__1AuXx\",\"messageInput\":\"Dialogs_messageInput__RpvMK\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["maxLength","maxLengthCreator","AddPostReduxForm","reduxForm","form","AddPostForm","props","handleSubmit","onSubmit","className","s","Field","placeholder","type","name","component","TextareaFC","validate","ButtonSubmit","AddPostContainer","connect","dispatch","addPost","newPostText","addPostAC","c","values","post","createSvgIcon","React","d","PostComponent","UserAvatar","img","userAvatar","size","style","marginLeft","userName","message","IconButton","onClick","count","likes","addLike","id","FavoriteBorder","color","PostComponentContainer","MyPosts","memo","postData","map","elem","MyPostsContainer","state","profilePage","profile","fullName","photos","small","ProfileStatusWithHooks","status","updateUserStatus","useState","editMode","setEditMode","newStatus","setNewStatus","useEffect","height","fontWeight","width","wordBreak","TextField","value","onBlur","onChange","e","currentTarget","autoFocus","fontStyle","minWidth","minHeight","cursor","onDoubleClick","Contact","title","link","margin","href","ProfileData","aboutMe","lookingForAJob","lookingForAJobDescription","Object","entries","contacts","ProfileForm","ProfileDataForm","error","required","CheckboxTC","label","keys","facebook","website","vk","twitter","instagram","youtube","github","mainLink","key","Profile","savePhoto","isOwner","saveProfile","large","data","initialValues","Button","variant","Preloader","alt","src","getPostsData","getProfileData","getProfileStatus","ContentContainer","refreshProfile","userAuthorizedID","match","params","userID","toString","history","push","getUserProfileTC","getUserStatusTC","this","prevProps","prevState","snapshot","savePhotoTC","saveProfileTC","compose","isAuth","getIsAuth","getUserID","setUserProfile","updateUserStatusTC","withRouter","useDispatch","submit","input","control","checked","meta","touched","marginBottom","helperText","fullWidth","undefined","length","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}
{"version":3,"file":"static/js/326.9f6fc853.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Login/Login.module.css?3530","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","components/common/FormsControls/ButtonSubmit/ButtonSubmit.tsx","components/common/FormsControls/CheckboxTC/CheckboxTC.tsx","components/common/FormsControls/TextareaTC/TextareaFC.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Login_container__XiMTb\",\"form\":\"Login_form__xawx9\",\"data\":\"Login_data__AkOnl\",\"title\":\"Login_title__vcg8P\",\"button\":\"Login_button__OdYu-\",\"error\":\"Login_error__ByltQ\"};","import React, {FC} from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport s from \"../Login.module.css\";\nimport {TextareaFC} from \"../../common/FormsControls/TextareaTC/TextareaFC\";\nimport {required} from \"../../../utils/validators/validators\";\nimport {CheckboxTC} from \"../../common/FormsControls/CheckboxTC/CheckboxTC\";\nimport {ButtonSubmit} from \"../../common/FormsControls/ButtonSubmit/ButtonSubmit\";\n\nexport type FormDataType = {\n    login: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\ntype PropsType = {\n    captchaURL: string | null\n}\nconst LoginForm: FC<PropsType & InjectedFormProps<FormDataType, PropsType>> = ({handleSubmit, error, captchaURL}) => {\n\n    return (\n        <form onSubmit={handleSubmit} className={s.form}>\n            {error && <div className={s.error}> {error} </div>}\n            <div className={s.data}>\n                <Field placeholder='Email'\n                       type='text'\n                       name='login'\n                       variant='standard'\n                       component={TextareaFC}\n                       validate={[required]}\n                />\n            </div>\n            <div className={s.data}>\n                <Field placeholder='Password'\n                       type='password'\n                       name='password'\n                       variant='standard'\n                       component={TextareaFC}\n                       validate={[required]}\n                />\n            </div>\n            <div className={s.data}>\n                <Field type='checkbox'\n                       component={CheckboxTC}\n                       label='remember me'/>\n            </div>\n\n            {\n                captchaURL && <>\n                    <img src={captchaURL} alt='captcha'/>\n                    <div className={s.data}>\n                        <Field placeholder='Captcha'\n                               type='text'\n                               name='captcha'\n                               variant='standard'\n                               component={TextareaFC}\n                               validate={[required]}\n                        />\n                    </div>\n                </>\n            }\n\n            <div className={s.button}>\n                <ButtonSubmit form={LoginForm}/>\n            </div>\n        </form>\n    )\n}\nexport const LoginReduxForm = reduxForm<FormDataType, PropsType>({\n    // a unique name for the form\n    form: 'login'\n})(LoginForm)","import s from './Login.module.css'\nimport React, {FC} from \"react\";\nimport {connect} from \"react-redux\";\nimport {loginTC} from \"../../bll/reducers/authReducer\";\nimport {stateType} from \"../../bll/redux-store\";\nimport {Redirect} from \"react-router-dom\";\nimport {FormDataType, LoginReduxForm} from \"./LoginForm/LoginForm\";\n\n\ntype LoginType = {\n    loginTC: (email: string, password: string, rememberMe: boolean, captcha?: string) => void\n    isAuth: boolean\n    captchaURL: string | null\n}\ntype mapStateToPropsType = {\n    isAuth: boolean\n    captchaURL: string | null\n}\nconst mapStateToProps = (state: stateType): mapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth,\n        captchaURL: state.auth.captchaURL\n    }\n}\nconst Login:FC<LoginType> = ({loginTC, isAuth, captchaURL}) => {\n    const onSubmit = (data: FormDataType) => {\n        loginTC(data.login, data.password, data.rememberMe, data.captcha)\n    }\n    if (isAuth) {\n        return <Redirect to='/profile'/>\n    }\n    return (\n        <div className='content'>\n            <div className={s.container}>\n                <h2 className={s.title}> LOGIN </h2>\n                <LoginReduxForm onSubmit={onSubmit} captchaURL={captchaURL}/>\n            </div>\n        </div>\n    )\n}\nexport default connect(mapStateToProps, {loginTC})(Login)\n\n\n","import React, {FC} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { submit } from \"redux-form\";\nimport { Button } from \"@material-ui/core\";\n\ntype ButtonSubmitProps = {\n    form: any\n}\nexport const ButtonSubmit: FC<ButtonSubmitProps> = ({form}) => {\n    const dispatch = useDispatch();\n\n    const onClickSubmit = () => {\n        dispatch(submit(form));\n    };\n\n    return (\n        <Button\n            type=\"submit\"\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={onClickSubmit}\n        >\n            Send\n        </Button>\n    );\n};","import {FC} from \"react\";\nimport {WrappedFieldProps} from \"redux-form\";\nimport {Checkbox, CheckboxProps, FormControlLabel, FormControlLabelProps} from \"@material-ui/core\";\n\n\nexport const CheckboxTC: FC<WrappedFieldProps & CheckboxProps & FormControlLabelProps> = ({\n                                                                                       input,\n                                                                                       label\n                                                                                   }) => (\n    <FormControlLabel\n        control={\n            <Checkbox\n                checked={!!input.value}\n                onChange={input.onChange}\n                color='primary'\n            />\n        }\n        label={label}\n    />\n);","import React, {FC} from \"react\";\nimport {TextField, TextFieldProps} from \"@material-ui/core\";\nimport {WrappedFieldProps} from \"redux-form\";\n\nexport const TextareaFC: FC<WrappedFieldProps & TextFieldProps> = ({\n                                                                       input,\n                                                                       placeholder,\n                                                                       variant,\n                                                                       type,\n                                                                       meta: {touched, error},\n                                                                       ...custom\n                                                                   }) => {\n    return (\n        <TextField {...input}\n                   style={{marginBottom: '10px'}}\n                   error={touched && error}\n                   helperText={touched && error}\n                   fullWidth\n                   label={placeholder}\n                   type={type}\n                   variant={variant ? variant : 'outlined'}\n                   size='small'/>\n    )\n}","export const required = (value: string) => {\n    return value ? undefined : 'Field is required'\n}\n\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n    return (value && value.length > maxLength) ? `Max length is ${maxLength} symbols` : undefined\n}"],"names":["LoginReduxForm","reduxForm","form","LoginForm","handleSubmit","error","captchaURL","onSubmit","className","s","Field","placeholder","type","name","variant","component","TextareaFC","validate","required","CheckboxTC","label","src","alt","ButtonSubmit","connect","state","isAuth","auth","loginTC","to","data","login","password","rememberMe","captcha","dispatch","useDispatch","color","onClick","submit","input","control","checked","value","onChange","meta","touched","style","marginBottom","helperText","fullWidth","size","undefined","maxLengthCreator","maxLength","length"],"sourceRoot":""}
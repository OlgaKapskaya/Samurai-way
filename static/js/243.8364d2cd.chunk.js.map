{"version":3,"file":"static/js/243.8364d2cd.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Content/Content.module.css?e72a","webpack://samurai-way/./src/components/Content/MyPosts/AddPost/AddPost.module.css?d9b4","components/Content/MyPosts/AddPost/AddPostForm.tsx","components/Content/MyPosts/AddPost/AddPostContainer.tsx","components/Content/MyPosts/AddPost/AddPost.tsx","webpack://samurai-way/./src/components/Content/MyPosts/MyPosts.module.css?f55d","webpack://samurai-way/./src/components/Content/MyPosts/Posts/PostCompponent.module.css?e8d6","../node_modules/@material-ui/icons/esm/FavoriteBorder.js","components/Content/MyPosts/Posts/PostComponent.tsx","components/Content/MyPosts/MyPosts.tsx","components/Content/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Content/ProfileInfo/ProfileInfo.module.css?17ab","components/Content/Status/ProfileStatusWithHooks.tsx","components/Content/ProfileInfo/ProfileInfo.tsx","components/Content/Content.tsx","bll/selectors/profileSelectors.ts","components/Content/ContentContainer.tsx","components/common/FormsControls/ButtonSubmit/ButtonSubmit.tsx","components/common/FormsControls/TextareaTC/TextareaFC.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"containerInfoAndPosts\":\"Content_containerInfoAndPosts__K-4vc\",\"containerInfo\":\"Content_containerInfo__K-Awl\",\"containerPosts\":\"Content_containerPosts__hRFaP\",\"headerContent\":\"Content_headerContent__5zGjm\",\"sidebar\":\"Content_sidebar__HerI4\"};","// extracted by mini-css-extract-plugin\nexport default {\"postContainer\":\"AddPost_postContainer__j6mqH\",\"title\":\"AddPost_title__48lN8\",\"newPost\":\"AddPost_newPost__+wdRj\",\"buttonContainer\":\"AddPost_buttonContainer__wFnWE\"};","import React, {FC} from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport s from \"../../../Dialogs/Dialogs.module.css\";\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\nimport {TextareaFC} from \"../../../common/FormsControls/TextareaTC/TextareaFC\";\nimport {ButtonSubmit} from \"../../../common/FormsControls/ButtonSubmit/ButtonSubmit\";\n\nexport type AddPostFormDataType = {\n    post: string\n}\nconst maxLength = maxLengthCreator(100)\nconst AddPostForm: FC<InjectedFormProps<AddPostFormDataType>> = (props) => {\n    const {handleSubmit} = props\n    return (\n        <form onSubmit={handleSubmit} className={s.form}>\n            <div className={s.data}>\n                <Field placeholder='Enter you post'\n                       type='text'\n                       name='post'\n                       component={TextareaFC}\n                       validate={[required, maxLength]}\n                />\n            </div>\n                <ButtonSubmit form={AddPostForm}/>\n        </form>\n    )\n}\nexport const AddPostReduxForm = reduxForm<AddPostFormDataType>({\n    // a unique name for the form\n    form: 'profileAddPostForm'\n})(AddPostForm)","import {AddPostAC} from \"../../../../bll/reducers/profileReducer\";\nimport {AddPost} from \"./AddPost\";\nimport {connect} from \"react-redux\";\nimport {AppDispatchType} from \"../../../../bll/redux-store\";\n\ntype  MapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nconst mapDispatchToProps = (dispatch: AppDispatchType): MapDispatchToPropsType => {\n    return {\n        addPost: (newPostText: string) => dispatch(AddPostAC(newPostText))\n    }\n}\n\nexport const AddPostContainer = connect(null, mapDispatchToProps )(AddPost)","import React, {FC} from \"react\";\nimport c from \"./AddPost.module.css\";\nimport {AddPostFormDataType, AddPostReduxForm} from \"./AddPostForm\";\n\ntype AddPostProps = {\n    addPost: (newPostText: string) => void\n}\n\nexport const AddPost: FC<AddPostProps> = ({addPost}) => {\n    const addPostHandler = (values: AddPostFormDataType):void => {\n        addPost(values.post)\n    }\n    return (\n        <div className={c.postContainer}>\n            <h3 className={c.title}>My posts</h3>\n            <AddPostReduxForm onSubmit={addPostHandler}/>\n        </div>\n    )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"myPostsContainer\":\"MyPosts_myPostsContainer__JJOly\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"PostCompponent_post__wtL2o\",\"avatarAndName\":\"PostCompponent_avatarAndName__-paSU\",\"avatar\":\"PostCompponent_avatar__7PQk-\",\"message\":\"PostCompponent_message__OEw-+\",\"likes\":\"PostCompponent_likes__8Nc8c\",\"likeimg\":\"PostCompponent_likeimg__978Wz\"};","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z\"\n}), 'FavoriteBorder');","import React from \"react\";\nimport post from \"./PostCompponent.module.css\"\nimport {IconButton} from \"@material-ui/core\";\nimport {FavoriteBorder} from \"@material-ui/icons\";\nimport {UserAvatar} from \"../../ProfileInfo/Avatar/UserAvatar\";\n\n\ntype PostComponentProps = {\n    id: string\n    message: string\n    likes: number\n    userName: string\n    userAvatar: string\n    addLike: (count: number, id: string) => void\n}\n\n\nconst PostComponent = (props: PostComponentProps) => {\n    const onClickLikeHandler = () => {\n        let count = props.likes+1\n        props.addLike(count, props.id)\n    }\n\n    return (\n        <div className={post.post}>\n            <div className={post.avatarAndName}>\n                <UserAvatar img={props.userAvatar} size={30}/>\n                <h5 style={{marginLeft: '5px'}}>{props.userName}</h5>\n            </div>\n            <span className={post.message}> {props.message}</span>\n            <div className={post.likes}>\n                <IconButton onClick={onClickLikeHandler} size={'small'}>\n                    <FavoriteBorder color={'primary'}/>\n                </IconButton>\n                <span> {props.likes}</span>\n\n            </div>\n\n        </div>\n        )\n\n}\nexport const PostComponentContainer = React.memo(PostComponent)\n","import React, {memo} from \"react\";\nimport {AddPostContainer} from \"./AddPost/AddPostContainer\";\nimport s from './MyPosts.module.css'\nimport {PostComponentContainer} from \"./Posts/PostComponent\";\n\nexport type MyPostsProps = {\n    postData: Array<PostDataType>\n    userName: string\n    userAvatar: string\n    addLike: (count: number, id: string) => void\n}\n\nexport type PostDataType = {\n    id: string\n    message: string\n    likes: number\n}\n\n\nexport const  MyPosts = memo((props: MyPostsProps) => {\n    return (\n        <div className={s.myPostsContainer}>\n            <AddPostContainer/>\n            {props.postData.map(elem => {\n                return (\n                    <PostComponentContainer key={elem.id}\n                                            id={elem.id}\n                                            message={elem.message}\n                                            likes={elem.likes}\n                                            userName={props.userName}\n                                            userAvatar={props.userAvatar}\n                                            addLike={props.addLike}/>\n\n                )\n            })}\n        </div>\n    )\n})\n","import {StateType} from \"../../../bll/store\";\nimport {AppDispatchType} from \"../../../bll/redux-store\";\nimport {AddLike} from \"../../../bll/reducers/profileReducer\";\nimport {connect} from \"react-redux\";\nimport {MyPosts, PostDataType} from \"./MyPosts\";\n\ntype mapStateToPropsType = {\n    postData: PostDataType[]\n    userName: string\n    userAvatar: string\n}\ntype mapDispatchToPropsType  = {\n    addLike: (count: number, id: string) => void\n}\n\nlet mapStateToProps = (state: StateType):mapStateToPropsType => {\n    return {\n        postData: state.profilePage.postData,\n        userName: state.profilePage.profile.fullName,\n        userAvatar: state.profilePage.profile.photos.small\n    }\n}\n\nlet mapDispatchToProps = (dispatch: AppDispatchType): mapDispatchToPropsType => {\n    return {\n        addLike: (count: number, id: string) => dispatch(AddLike(count, id)),\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","// extracted by mini-css-extract-plugin\nexport default {\"mainContainer\":\"ProfileInfo_mainContainer__d69cS\",\"avatarContainer\":\"ProfileInfo_avatarContainer__heq72\",\"infoContainer\":\"ProfileInfo_infoContainer__RYluA\",\"Name\":\"ProfileInfo_Name__sfIb4\",\"data\":\"ProfileInfo_data__grD19\"};","import {TextField} from \"@material-ui/core\";\nimport React, {ChangeEvent, FC, useEffect, useState} from \"react\";\n\ntype ProfileStatusWithHooksPropsType = {\n    status: string\n    updateUserStatus: (status: string) => void\n}\nexport const ProfileStatusWithHooks: FC<ProfileStatusWithHooksPropsType> = ({status, updateUserStatus}) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [newStatus, setNewStatus] = useState<string>(status)\n\n    useEffect(() => {\n        if (status !== newStatus)\n        setNewStatus(status)\n    }, [status])\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        updateUserStatus(newStatus)\n    }\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setNewStatus(e.currentTarget.value)\n    }\n    return (\n        <>\n            <div style={{height: 'max-content', fontWeight: 'bold'}}>\n                Status:\n                {\n                    editMode\n                        ? <TextField value={newStatus}\n                                     onBlur={deactivateEditMode}\n                                     onChange={onChangeStatus}\n                                     autoFocus/>\n                        : <span style={{\n                            fontStyle: 'italic',\n                            minWidth: '100px',\n                            minHeight: '12px',\n                            cursor: 'pointer',\n                            fontWeight: 'normal'\n                        }}\n                                onDoubleClick={activateEditMode}>\n                        {status ? ' ' + status : ' -'}\n                        </span>\n                }\n            </div>\n        </>\n    )\n}","import React, {FC} from \"react\";\nimport s from \"./ProfileInfo.module.css\";\nimport {ProfileUserType} from \"../../../bll/store\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {ProfileStatusWithHooks} from \"../Status/ProfileStatusWithHooks\";\nimport {UserAvatar} from \"./Avatar/UserAvatar\";\n\ntype ProfileInfoProps = {\n    profile: ProfileUserType\n    status: string\n    updateUserStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (photo: File) => void\n}\nexport const ProfileInfo: FC<ProfileInfoProps> = ({profile,savePhoto, status, updateUserStatus, isOwner}) => {\n    if (!profile) {\n        return <Preloader/>\n    }\n    return (\n        <div className={s.mainContainer}>\n            <div className={s.avatarContainer}>\n                <UserAvatar img={profile.photos.large}\n                            savePhoto={savePhoto}\n                            size={200}\n                            isOwner={isOwner}/>\n            </div>\n            <div className={s.infoContainer}>\n                <div className={s.Name}>{profile.fullName}</div>\n\n                <ProfileStatusWithHooks status={status}\n                                        updateUserStatus={updateUserStatus}/>\n\n\n                <div className={s.data}><span> About me: </span> {profile.aboutMe}</div>\n                <div className={s.data}><span> Looking for a job: <input type={'checkbox'}\n                                                                         checked={profile.lookingForAJob}/></span></div>\n                <div className={s.data}><span> Description: </span> {profile.lookingForAJobDescription}</div>\n                <div className={s.data}><span> GitHub: </span> {profile.contacts.github}</div>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport {PostDataType} from \"./MyPosts/MyPosts\";\nimport s from './Content.module.css'\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {ProfileUserType} from \"../../bll/store\";\n\n\ntype ContentProps = {\n    postData: PostDataType[]\n    profile: ProfileUserType\n    status: string\n    updateUserStatus: (status: string) => void\n    savePhoto: (photo: File) => void\n    isOwner: boolean\n}\n\n\nfunction Content(props: ContentProps) {\n    return (\n        <div className='content'>\n            <div >\n                <img className={s.headerContent} alt='big content'\n                     src='https://img5.goodfon.ru/wallpaper/nbig/5/2e/gory-skaly-vodoem-les-otrazhenie-bereg.jpg'/>\n            </div>\n            <div className={s.containerInfoAndPosts}>\n                <div className={s.containerInfo}>\n                    <ProfileInfo profile={props.profile}\n                                 status={props.status}\n                                 isOwner={props.isOwner}\n                                 savePhoto={props.savePhoto}\n                                 updateUserStatus={props.updateUserStatus}/>\n                </div>\n                <div className={s.containerPosts}>\n                    <MyPostsContainer/>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Content;","import {stateType} from \"../redux-store\";\n\nexport const getPostsData = (state: stateType) => {\n    return state.profilePage.postData\n}\nexport const getProfileData = (state: stateType) => {\n    return state.profilePage.profile\n}\nexport const getProfileStatus = (state: stateType) => {\n    return state.profilePage.status\n}","import React from \"react\";\nimport Content from \"./Content\";\nimport {PostDataType} from \"./MyPosts/MyPosts\";\nimport {ProfileUserType} from \"../../bll/store\";\nimport {connect} from \"react-redux\";\nimport {\n    AddLike,\n    AddPostAC,\n    getUserProfileTC,\n    getUserStatusTC, savePhotoTC,\n    SetUserProfile, updateUserStatusTC\n} from \"../../bll/reducers/profileReducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {stateType} from \"../../bll/redux-store\";\nimport {compose} from \"redux\";\nimport {getIsAuth, getUserID} from \"../../bll/selectors/authSelectors\";\nimport {getPostsData, getProfileData, getProfileStatus} from \"../../bll/selectors/profileSelectors\";\n\ntype mapStateToPropsType = {\n    postData: PostDataType[]\n    profile: ProfileUserType\n    status: string\n    isAuth: boolean\n    userID: number | null\n}\ntype mapDispatchToPropsType = {\n    AddPost: (newPostText: string) => void\n    AddLike: (count: number, id: string) => void\n    SetUserProfile: (profile: ProfileUserType) => void\n    getUserProfileTC: (userID: string) => void\n    getUserStatusTC: (userID: string) => void\n    updateUserStatus: (status: string) => void\n    savePhotoTC: (photo: File) => void\n\n}\ntype PathParamsType = {\n    userID: string,\n}\n\n\n\ntype ContentPropsType = RouteComponentProps<PathParamsType> & mapStateToPropsType\n    & mapDispatchToPropsType\n\nexport class ContentContainer extends React.Component<ContentPropsType> {\n    refreshProfile = () => {\n        let userAuthorizedID = this.props.match.params.userID\n        if (!userAuthorizedID) {\n            userAuthorizedID = this.props.userID ? this.props.userID.toString() : ''\n            if (userAuthorizedID === '') {\n                this.props.history.push('/login')\n            }\n        }\n\n        this.props.getUserProfileTC(userAuthorizedID)\n        this.props.getUserStatusTC(userAuthorizedID)\n    }\n    componentDidMount() {\n        this.refreshProfile()\n    }\n    componentDidUpdate(prevProps: Readonly<ContentPropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userID !== prevProps.match.params.userID)\n        this.refreshProfile()\n    }\n\n    render() {\n        return <Content isOwner={!this.props.match.params.userID}\n                        savePhoto={this.props.savePhotoTC}\n                        {...this.props}/>\n    }\n}\n\nlet mapStateToProps = (state: stateType): mapStateToPropsType => {\n    return {\n        postData: getPostsData(state),\n        profile: getProfileData(state),\n        status: getProfileStatus(state),\n        isAuth: getIsAuth(state),\n        userID: getUserID(state),\n    }\n}\n\nexport default compose<React.ComponentType>(\n    // withAuthRedirect,\n    connect(mapStateToProps, {\n        AddPost: AddPostAC, AddLike, SetUserProfile,\n        getUserProfileTC, getUserStatusTC,\n        updateUserStatus: updateUserStatusTC, savePhotoTC\n    } as mapDispatchToPropsType),\n    withRouter)(ContentContainer)\n\n","import React, {FC} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { submit } from \"redux-form\";\nimport { Button } from \"@material-ui/core\";\n\ntype ButtonSubmitProps = {\n    form: any\n}\nexport const ButtonSubmit: FC<ButtonSubmitProps> = ({form}) => {\n    const dispatch = useDispatch();\n\n    const onClickSubmit = () => {\n        dispatch(submit(form));\n    };\n\n    return (\n        <Button\n            type=\"submit\"\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={onClickSubmit}\n        >\n            Send\n        </Button>\n    );\n};","import React, {FC} from \"react\";\nimport {TextField, TextFieldProps} from \"@material-ui/core\";\nimport {WrappedFieldProps} from \"redux-form\";\n\nexport const TextareaFC: FC<WrappedFieldProps & TextFieldProps> = ({\n                                                                       input,\n                                                                       placeholder,\n                                                                       variant,\n                                                                       type,\n                                                                       meta: {touched, error},\n                                                                       ...custom\n                                                                   }) => {\n    return (\n        <TextField {...input}\n                   style={{marginBottom: '10px'}}\n                   error={touched && error}\n                   helperText={touched && error}\n                   fullWidth\n                   label={placeholder}\n                   type={type}\n                   variant={variant ? variant : 'outlined'}\n                   size='small'/>\n    )\n}","export const required = (value: string) => {\n    return value ? undefined : 'Field is required'\n}\n\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n    return (value && value.length > maxLength) ? `Max length is ${maxLength} symbols` : undefined\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogsContainer\":\"Dialogs_dialogsContainer__8cx4-\",\"dialogs\":\"Dialogs_dialogs__oe96H\",\"sidebar\":\"Dialogs_sidebar__4F+Oi\",\"dialogsMessages\":\"Dialogs_dialogsMessages__F6PfG\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"addDialogContainer\":\"Dialogs_addDialogContainer__1AuXx\",\"messageInput\":\"Dialogs_messageInput__RpvMK\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["maxLength","maxLengthCreator","AddPostReduxForm","reduxForm","form","AddPostForm","props","handleSubmit","onSubmit","className","s","Field","placeholder","type","name","component","TextareaFC","validate","required","ButtonSubmit","AddPostContainer","connect","dispatch","addPost","newPostText","AddPostAC","c","values","post","createSvgIcon","React","d","PostComponent","UserAvatar","img","userAvatar","size","style","marginLeft","userName","message","IconButton","onClick","count","likes","addLike","id","FavoriteBorder","color","PostComponentContainer","MyPosts","memo","postData","map","elem","MyPostsContainer","state","profilePage","profile","fullName","photos","small","AddLike","ProfileStatusWithHooks","status","updateUserStatus","useState","editMode","setEditMode","newStatus","setNewStatus","useEffect","height","fontWeight","TextField","value","onBlur","onChange","e","currentTarget","autoFocus","fontStyle","minWidth","minHeight","cursor","onDoubleClick","ProfileInfo","savePhoto","isOwner","large","aboutMe","checked","lookingForAJob","lookingForAJobDescription","contacts","github","Preloader","alt","src","getPostsData","getProfileData","getProfileStatus","ContentContainer","refreshProfile","userAuthorizedID","match","params","userID","toString","history","push","getUserProfileTC","getUserStatusTC","this","prevProps","prevState","snapshot","savePhotoTC","compose","isAuth","getIsAuth","getUserID","AddPost","SetUserProfile","updateUserStatusTC","withRouter","useDispatch","variant","submit","input","meta","touched","error","marginBottom","helperText","fullWidth","label","undefined","length","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}